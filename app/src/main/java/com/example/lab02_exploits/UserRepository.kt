package com.example.lab02_exploits

import android.util.Log
import android.widget.Toast
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.tasks.OnCompleteListener
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.GeoPoint
import com.google.firebase.firestore.SetOptions
import com.google.firebase.firestore.auth.User
import com.google.firebase.iid.FirebaseInstanceId


class UserRepository {

    private val userDB = FirebaseFirestore.getInstance().collection("Users")
    private val mutableData = MutableLiveData<MutableList<Users>>()
    private val listData = mutableListOf<Users>()

    fun getUsersData(): LiveData<MutableList<Users>> {
        userDB.addSnapshotListener { snapshot, e ->
            if(e != null) {
                Log.w("UserRepo", "Listen Failed", e)
            }
            if (snapshot != null) {
                val documents = snapshot.documents
                documents.forEach {
                   val user = it.toObject(Users::class.java)
                    if (user != null) {
                        listData.add(user)
                    }
                }
                mutableData.value = listData
            }
        }
        return mutableData
    }

    fun getUser (Uid: String) : MutableLiveData<Users> {
        val liveCurrentUser = MutableLiveData<Users>()
        var currentUser : Users? = null
        userDB.document(Uid).addSnapshotListener {snapshot, e ->
            if(e != null) {
                Log.w("UserRepo", "Listen Failed", e)
            }
            if (snapshot != null) {
                currentUser = snapshot.toObject(Users::class.java)
                liveCurrentUser.value = currentUser
                Log.d("userRepo","currentUser: $currentUser")
            }

        }
        return liveCurrentUser
    }

    fun getUserName (Uid: String): MutableLiveData<String> {
        val liveName = MutableLiveData<String>()
        var userName : String? = ""
        userDB.document(Uid).addSnapshotListener { snapshot, e ->
            if(e != null) {
                Log.w("UserRepo", "Listen Failed", e)
            }
            if (snapshot != null) {
                userName = snapshot.getString("name")
                liveName.value = userName
            }
        }
        return liveName
    }

    fun addUser (Uid : String , userObject : Users): MutableLiveData<MutableList<Users>> {
        //val listData = mutableListOf<Users>()
        userDB.document(Uid).set(userObject)
            .addOnSuccessListener {
                listData.add(userObject)
                mutableData.value = listData
               // Toast.makeText(this, "User Added.", Toast.LENGTH_SHORT).show()
                Log.d("userRepo", "Add:success")
            }
            .addOnFailureListener {
                Log.d("userRepo", "Add:failure")
                // Toast.makeText(this, "Fail to Add User.", Toast.LENGTH_SHORT).show()
            }
        return mutableData
    }

    fun registrationToken() : MutableLiveData<String> {
        val regToken = MutableLiveData<String>()
        FirebaseInstanceId.getInstance().instanceId
            .addOnCompleteListener(OnCompleteListener { task ->
                if (!task.isSuccessful) {
                    Log.w("Notification", "getInstanceId failed", task.exception)
                    return@OnCompleteListener
                }

                // Get new Instance ID token
                val token = task.result?.token
                regToken.value = token

                // Log and toast
                //val msg = getString(R.string.msg_token_fmt, token)
                //Log.d(TAG, msg)
                //Toast.makeText(baseContext, msg, Toast.LENGTH_SHORT).show()
            })
        return regToken
    }

    fun updateLocation (Uid: String, location: String, coordinates : GeoPoint) {
        //userDB.document(Uid).update("location", location)
        val map = mapOf<String,Any>("location" to location, "geoPoint" to coordinates)
        userDB.document(Uid).set(map, SetOptions.merge())
            .addOnSuccessListener {
                Log.d("userRepo", "Update:success")
            }
            .addOnFailureListener {
                Log.d("userRepo", "Update:failure")
            }
    }

    fun updateBeforeLocation (Uid: String, name : String, nickname : String, photoPath : String) {
        val map = mapOf<String,Any>("userId" to Uid, "name" to name, "nickname" to nickname, "photoPath" to photoPath)
        userDB.document(Uid).set(map, SetOptions.merge())
            .addOnSuccessListener {
                Log.d("userRepo", "Update:success")
            }
            .addOnFailureListener {
                Log.d("userRepo", "Update:failure")
            }
    }

    fun getLocation (Uid: String) : MutableLiveData<GeoPoint> {
        val liveCurrentLoc = MutableLiveData<GeoPoint>()
        userDB.document(Uid).addSnapshotListener { snapshot, e ->
            if(e != null) {
                Log.w("UserRepo", "Listen Failed", e)
            }
            if (snapshot != null) {
                val currentUser = snapshot.getGeoPoint("geoPoint")
                liveCurrentLoc.value = currentUser
            }

        }
        return liveCurrentLoc
    }

    fun updateUser (Uid : String , userObject : Users) {
        userDB.document(Uid).set(userObject)
            .addOnSuccessListener {
                Log.d("userRepo", "Update:success")
            }
            .addOnFailureListener {
                Log.d("userRepo", "Update:failure")
            }
    }

    fun deleteUser (Uid : String) {
        userDB.document(Uid).delete()
            .addOnSuccessListener {
                Log.d("userRepo", "Update:success")
            }
            .addOnFailureListener {
                Log.d("userRepo", "Update:failure")
            }
    }


}
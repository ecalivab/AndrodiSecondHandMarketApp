package com.example.lab02_exploits

import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.lab02_exploits.UserRepository
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class MainActivityViewModel : ViewModel() {
    private val userRepo = UserRepository()
    private val itemRepo = ItemRepository()
    private lateinit var auth: FirebaseAuth

    fun fetchUser(Uid: String) : MutableLiveData<Users> {
        val currentUser = MutableLiveData<Users>()
        userRepo.getUser(Uid).observeForever{ user ->
            currentUser.value = user
            Log.d("showProfileVM","currentUser: $currentUser")
        }
        return  currentUser
    }


    //Edit this function in a way that it returnsNotifications
    /*fun getNotifications() : MutableLiveData<MutableList<Items>> {
        var mutableData = MutableLiveData<MutableList<Items>>()
        auth = FirebaseAuth.getInstance()
        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.fetchNotifications(auth).observeForever { itemList ->
                mutableData.value = itemList
                Log.d("Notification", "noitifyList: $itemList")
            }
        }
        Log.d("Notification", "ExitingGetNotifications")
        Log.d("Notification", "mutableData: ${mutableData.value}")
        return mutableData
    }
    */

    //Edit this function in a way that it returnsNotifications
    /*fun getNotifications() : MutableLiveData<MutableList<Notify>> {
        val mutableData = MutableLiveData<MutableList<Notify>>()
        auth = FirebaseAuth.getInstance()
        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.fetchNotifications(auth).observeForever { notifyList ->
                mutableData.value = notifyList
                Log.d("Notification", "noitifyList: $notifyList")
            }
        }
        Log.d("Notification", "ExitingGetNotifications")
        Log.d("Notification", "mutableData: ${mutableData.value}")
        return mutableData
    }*/

    fun getItem(itemId: String): MutableLiveData<Items> {
        val mutableData = MutableLiveData<Items>()
        itemRepo.getItem(itemId).observeForever { item ->
             mutableData.value = item
        }
        return mutableData
    }
}
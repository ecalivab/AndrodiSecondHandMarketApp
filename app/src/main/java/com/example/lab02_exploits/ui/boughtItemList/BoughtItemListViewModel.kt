package com.example.lab02_exploits.ui.boughtItemList

import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.lab02_exploits.ItemRepository
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.Review
import com.example.lab02_exploits.SearchFilter
import com.google.firebase.auth.FirebaseAuth

class BoughtItemListViewModel : ViewModel() {
    private val itemRepo = ItemRepository()
    private lateinit var auth: FirebaseAuth

    var searchFilters = mutableListOf<SearchFilter>()

    fun setSellerReview(uid: String, iId: String, sellerId: String, rating: String, comment: String) {
        Log.d("ReviewSetViewModel", "ReviewSetViewModelEntered")
        itemRepo.reviewItemSeller("", uid, iId, sellerId, rating, comment)
    }

    fun blockDoubleReview(uid: String, iId: String, sellerId: String): MutableLiveData<Boolean>
    {
        //Log.d("fetchItems", "Entered")
        var mutableData = MutableLiveData<Boolean>()

        auth = FirebaseAuth.getInstance()
        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.getReviewCheck(uid, iId, sellerId).observeForever { present ->
                mutableData.value = present //if not present = true, if present = false
            }
        }
        else
        {

        }
        Log.d("ReviewBoughtItemListViewModel", mutableData.value.toString())
        return mutableData
    }


    fun getReview(uid: String, iId: String, sellerId: String): MutableLiveData<Review>
    {
        //Log.d("fetchItems", "Entered")
        var mutableData = MutableLiveData<Review>()

        auth = FirebaseAuth.getInstance()
        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.getReview(uid, iId, sellerId).observeForever { rev ->
                mutableData.value = rev//if not present = true, if present = false
            }
        }
        else
        {

        }
        Log.d("ReviewBoughtItemListViewModel", mutableData.value.toString())
        return mutableData
    }



    fun fetchItems() : MutableLiveData<MutableList<Items>> {
        //Log.d("fetchItems", "Entered")
        var mutableData = MutableLiveData<MutableList<Items>>()
        //var sf = SearchFilter(0, "ref")
        //searchFilters?.add(sf)
        //Log.d("searchFilter", searchFilters.elementAt(0).data.toString())
        auth = FirebaseAuth.getInstance()
        /*
        if(auth.currentUser == null)
        {
            Log.d("logged", "not signed")
        }
        else
        {
            Log.d("logged", "signed")
        }
        */
        //Log.d("signed", auth.currentUser?.uid.toString())
        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.getBoughtListItemsData(auth, searchFilters).observeForever { userList ->
                mutableData.value = userList
            }
        }
        else
        {
            /*
            //Log.d("searchFilter", searchFilters?.get(0)?.type.toString() + searchFilters?.get(0)?.data.toString())
            itemRepo.getBuyFilteredItemsData(null, searchFilters).observeForever { userList ->
                mutableData.value = userList
            }
            */
        }

        //val user = auth.currentUser

        /*
        user?.let {
            // Name, email address, and profile photo Url
            val name = user.displayName
            val email = user.email
            val photoUrl = user.photoUrl

            // Check if user's email is verified
            val emailVerified = user.isEmailVerified

            // The user's ID, unique to the Firebase project. Do NOT use this value to
            // authenticate with your backend server, if you have one. Use
            // FirebaseUser.getToken() instead.
            val uid = user.uid
        }
        */
        return mutableData
    }
}
package com.example.lab02_exploits.ui.itemEdit

import android.net.Uri
import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.navigation.NavController
import com.example.lab02_exploits.ItemRepository
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.R
import com.google.firebase.storage.FirebaseStorage

class ItemEditViewModel : ViewModel() {

    private val itemRepo = ItemRepository()

    fun addItem (iId: String, itemObject : Items, photo : Uri?, navController: NavController) {
        val ref= FirebaseStorage.getInstance().getReference("itemPictures/$iId")
        if (photo != null) {
            ref.putFile(photo).addOnSuccessListener {
                Log.d("ItemEditVM", " Add Item: Picture Uploaded Successfully")
            }
            ref.downloadUrl.addOnSuccessListener {
                Log.d("ItemEditVM", "Download Path $it")
                itemObject.itemURI = it.toString()
                itemRepo.addItem(iId, itemObject)
                navController.navigate(R.id.action_nav_itemEdit_to_nav_itemList)
            }.addOnFailureListener{
                Log.d("ItemEditVM", "Fail Download $it")
            }
        } else {
            itemRepo.addItem(iId, itemObject)
            navController.navigate(R.id.action_nav_itemEdit_to_nav_itemList)
        }
    }

    fun updateItem(iId: String, itemObject : Items, photo : Uri?, navController: NavController) {
        val ref= FirebaseStorage.getInstance().getReference("itemPictures/$iId")
        if (photo != null) {
            ref.putFile(photo).addOnSuccessListener {
                Log.d("ItemEditVM", "Picture Uploaded Successfully")
            }
            ref.downloadUrl.addOnSuccessListener {
                Log.d("ItemEditVM", "Download Path $it")
                itemObject.itemURI = it.toString()
                itemRepo.updateItem(iId, itemObject)
                navController.navigate(R.id.action_nav_itemEdit_to_nav_itemList)
            }.addOnFailureListener{
                Log.d("ItemEditVM", "Fail Download $it")
            }
        } else {
            itemRepo.updateItem(iId, itemObject)
            navController.navigate(R.id.action_nav_itemEdit_to_nav_itemList)
        }
    }

    fun deleteItem(iId : String, navController: NavController) {
        val ref= FirebaseStorage.getInstance().getReference("itemPictures/$iId")
        ref.delete().addOnSuccessListener {
            Log.d("ItemEditVM", "File Deleted")
        }
        itemRepo.deleteItem(iId)
        navController.navigate(R.id.action_nav_itemEdit_to_nav_itemList)
    }

    fun fetchItem (itemId: String) : MutableLiveData<Items> {
        val currentItem = MutableLiveData<Items>()
        itemRepo.getItem(itemId).observeForever{ item ->
            currentItem.value = item
            Log.d("ItemEditVM","currentUser: $currentItem")
        }

        return  currentItem
    }

    fun updateItemBeforeMaps (iId: String, uId: String ,title : String, price: Double, category: String, expireDate : String, description : String, photoPath : String) {
        itemRepo.updateBeforeLocation(iId, uId ,title, price, category, expireDate, description, photoPath)
    }


}
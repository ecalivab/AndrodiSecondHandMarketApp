package com.example.lab02_exploits.ui.editProfile

import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.navigation.NavController
import com.example.lab02_exploits.R
import com.example.lab02_exploits.UserRepository
import com.example.lab02_exploits.Users
import com.google.firebase.firestore.auth.User
import com.google.firebase.storage.FirebaseStorage
import java.net.URI

class EditProfileViewModel : ViewModel() {

    private val userRepo = UserRepository()

    fun regToken() : MutableLiveData<String> {
        val regToken = MutableLiveData<String>()
        userRepo.registrationToken().observeForever{
            regToken.value = it
        }
        return regToken
    }

    fun updateUser(Uid : String, userObject : Users, photoUri: Uri?, navController: NavController) {
        val ref= FirebaseStorage.getInstance().getReference("profilePictures/$Uid")
        Log.d("EditProfileVM", "Save/Update User")
        if (photoUri != null) {
            Log.d("EditProfileVM", "Ref: $ref")
            ref.putFile(photoUri).addOnSuccessListener {
                Log.d("EditProfileVM", "Successfully Upload Photo")
                ref.downloadUrl.addOnSuccessListener {
                    Log.d("EditProfileVM", "photoPath: $it")
                    userObject.photoPath = it.toString()
                    userRepo.updateUser(Uid, userObject)
                    navController.navigate(R.id.action_nav_editProfile_to_nav_showProfile)
                }.addOnFailureListener {
                    e -> Log.w("EditProfileVW", "Failed To Get Download Path", e)
                }

            }.addOnFailureListener {
                e -> Log.w("EditProfileVW", "Failed To Upload Picture", e)
            }

        } else {
            userRepo.updateUser(Uid, userObject)
            navController.navigate(R.id.action_nav_editProfile_to_nav_showProfile)
        }
    }

    fun getUser(Uid: String) : MutableLiveData<Users> {
        val currentUser = MutableLiveData<Users>()
        userRepo.getUser(Uid).observeForever{ user ->
            currentUser.value = user
        }
        return  currentUser
    }

    fun updateUserBeforeMaps (Uid: String, name : String, nickname : String, photoPath : String) {
        userRepo.updateBeforeLocation(Uid, name, nickname, photoPath)
    }
    /*fun uploadImage(Uid: String, photoUri: Uri) : Uri? {
        val ref= FirebaseStorage.getInstance().getReference("profilePictures/$Uid/")
        var downloadPath : Uri? = null
        ref.putFile(photoUri).addOnSuccessListener {
            Log.d("EditProfileVM", "Picture Uploaded Successfully")
        }

         ref.downloadUrl.addOnSuccessListener {
             downloadPath = it
             Log.d("EditProfileVM", "Download Path $it")
         }
        Log.d("EditProfileVM", "Download Path $downloadPath")
        return downloadPath

    }*/
}

package com.example.lab02_exploits.ui.itemList

import androidx.lifecycle.ViewModelProviders
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.Toast
import androidx.activity.addCallback
import androidx.lifecycle.Observer
import androidx.navigation.findNavController
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.lab02_exploits.ItemAdapter
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.R
import com.google.firebase.auth.FirebaseAuth
import kotlinx.android.synthetic.main.fragment_item_list.*



class ItemListFragment : Fragment() {

    private lateinit var auth: FirebaseAuth

    companion object {
        fun newInstance() = ItemListFragment()
    }
    private lateinit var viewModel: ItemListViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_item_list, container, false)
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        viewModel = ViewModelProviders.of(this).get(ItemListViewModel::class.java)

        requireActivity().onBackPressedDispatcher.addCallback(this) {
        }

        auth = FirebaseAuth.getInstance()

        //item_recycler.adapter = ItemAdapter(Items.itemList)
        item_recycler.layoutManager = LinearLayoutManager(requireContext())

        if(auth.currentUser != null) {
            observeData()
        } else {
            text_empty.visibility = View.VISIBLE
        }

        //To set the navigation to ItemDetails the code is written on the adapter onBindView...
    }

    private fun observeData() {
        viewModel.fetchMyItems().observe(viewLifecycleOwner, Observer {
            if(it.isNullOrEmpty()){
                text_empty.visibility = View.VISIBLE
            }
            else {
                text_empty.visibility = View.GONE
            }
            item_recycler.adapter = ItemAdapter(it, "ItemList")
            (item_recycler.adapter as ItemAdapter).notifyDataSetChanged()
        })
    }
}


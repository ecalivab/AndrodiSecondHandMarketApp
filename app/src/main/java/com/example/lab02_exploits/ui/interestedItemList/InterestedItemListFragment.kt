package com.example.lab02_exploits.ui.interestedItemList

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.app.DatePickerDialog
import android.content.Context
import android.content.DialogInterface
import androidx.lifecycle.ViewModelProvider
import android.os.Bundle
import android.text.InputType
import android.util.Log
import android.view.*
import android.widget.*
import androidx.activity.addCallback
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.lab02_exploits.ItemAdapter
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.R
import com.example.lab02_exploits.SearchFilter
import kotlinx.android.synthetic.main.fragment_buy_item_list.*
import java.util.*

class InterestedItemListFragment : Fragment() {

    private var mContext: Context? = null
    private var vw: View? = null
    lateinit var spinnerDialog: Spinner
    lateinit var spinString: String
    var localList: MutableList<Items>? = null
    var searchFilters: MutableList<SearchFilter>? = null

    //var searchFilters: MutableList<SearchFilter>? = null

    override fun onAttach(context: Context) {
        super.onAttach(context)
        mContext = context
    }

    override fun onDetach() {
        super.onDetach()
        mContext = null
    }


    companion object {
        fun newInstance() =
            InterestedItemListFragment()
    }

    private lateinit var viewModel: InterestedItemListViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        setHasOptionsMenu(true);
        activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        return inflater.inflate(R.layout.interested_item_list_fragment, container, false)
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        viewModel = ViewModelProvider(this).get(InterestedItemListViewModel::class.java)

        requireActivity().onBackPressedDispatcher.addCallback(this) {
        }

        item_recycler.layoutManager = LinearLayoutManager(requireContext())
        observeData()
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)
        inflater.inflate(R.menu.filter_menu, menu)
    }

    @ExperimentalStdlibApi
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.filter_by -> {
                showBasicDialog(null)

                //vw?.let { showPopup(it) }
                //INSERIRE QUI IL CODICE DEL FILTRO
                true
            }
            R.id.filter_delete -> {
                if(!viewModel.searchFilters.isEmpty())
                {
                    viewModel.searchFilters.removeLast()
                    observeData()
                }
                true
            }
            R.id.filter_clear -> {
                viewModel.searchFilters.removeAll { true }
                observeData()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    //Basic dialog that work as filter
    private fun showBasicDialog(view: View?) {
        val category : Array<String> = arrayOf("Title", "Description", "Price", "Category", "Location", "ExpireDate")
        val builder = AlertDialog.Builder(mContext)
        builder.setTitle("Filter By")
            .setItems(category,
                DialogInterface.OnClickListener { dialog, which ->
                    when (which) {
                        0 -> showTitleDialog(null, 0)
                        1 -> showTitleDialog(null, 1)
                        2 -> showPriceDialog(null)
                        3 -> showCategoryDialog(null)
                        4 -> showTitleDialog(null, 2)
                        5 -> showExpireDialog(null)
                        else -> println("Number too high")
                    }
                })
        builder.create()
        builder.show()
    }

    //Title, Description, Location filter dialog
    private fun showTitleDialog (view: View?, number: Number) {
        val edtxt: EditText = EditText(mContext)
        val builder = AlertDialog.Builder(mContext)
        builder.setTitle("Text Search")
        // Get the layout inflater
        val inflater = requireActivity().layoutInflater;

        // Inflate and set the layout for the dialog
        // Pass null as the parent view because its going in the dialog layout
        builder.setView(edtxt)
            // Add action buttons
            .setPositiveButton("Search",
                DialogInterface.OnClickListener { dialog, id ->
                    when (number) {
                        0 -> {
                            val sf = SearchFilter(0, edtxt.text.toString())
                            Log.d("textTitle", "Value: " + sf.data)
                            if(sf.data != "") {
                                viewModel.searchFilters.add(sf)
                                observeData()
                            }
                        }
                        1 -> {
                            val sf = SearchFilter(1, edtxt.text.toString())
                            Log.d("textDescr", "Value: " + sf.data)
                            if(sf.data != "") {
                                viewModel.searchFilters.add(sf)
                                observeData()
                            }
                        }
                        2 -> {
                            val sf = SearchFilter(4, edtxt.text.toString())
                            Log.d("textLoc", "Value: " + sf.data)
                            if(sf.data != "") {
                                viewModel.searchFilters.add(sf)
                                observeData()
                            }
                        }
                        else -> { // Note the block
                            print("error")
                        }
                    }
                })
            .setNegativeButton("Cancel",
                DialogInterface.OnClickListener { dialog, id ->
                    //cancel
                })
        builder.create()
        builder.show()
    }

    //Price filter dialog
    private fun showPriceDialog(view: View?) {
        val layout: LinearLayout = LinearLayout(mContext)
        layout.setLayoutParams(
            LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
        )
        layout.setOrientation(LinearLayout.VERTICAL)
        val minPriceLabel: TextView = TextView(mContext)
        minPriceLabel.text = "Insert Minimum Price"
        val minPrice: EditText = EditText(mContext)
        minPrice.setInputType(InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL)
        val maxPriceLabel: TextView = TextView(mContext)
        maxPriceLabel.text = "Insert Maximum Price"
        val maxPrice: EditText = EditText(mContext)
        maxPrice.setInputType(InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL)
        layout.addView(minPriceLabel)
        layout.addView(minPrice)
        layout.addView(maxPriceLabel)
        layout.addView(maxPrice)
        val builder = AlertDialog.Builder(mContext)
        builder.setTitle("Price Search")
        val inflater = requireActivity().layoutInflater;
        builder.setView(layout)

        // Inflate and set the layout for the dialog
        // Pass null as the parent view because its going in the dialog layout
        builder.setView(layout)
            // Add action buttons
            .setPositiveButton("Filter",
                DialogInterface.OnClickListener { dialog, id ->
                    val sf = SearchFilter(2, minPrice.text.toString() + "-" + maxPrice.text.toString())
                    Log.d("textPrice", "Value: " + sf.data)
                    if(sf.data != "-" && sf.data != "") {
                        viewModel.searchFilters?.add(sf)
                        observeData()
                    }
                })
            .setNegativeButton("Cancel",
                DialogInterface.OnClickListener { dialog, id ->
                    //cancel
                })
        builder.create()
        builder.show()
    }

    @SuppressLint("SetTextI18n")
    fun showExpireDialog(view: View?) {
        val builder = AlertDialog.Builder(mContext)
        builder.setTitle("Expire Date Filter")
        builder.setMessage("(You will see only elements which expire date is after the selected one)")

        //Handle Date Picker EditText
        val dpBtn = EditText(mContext)
        dpBtn.setInputType(InputType.TYPE_NULL);
        dpBtn.setTextIsSelectable(false);
        val c = Calendar.getInstance()
        val year = c.get(Calendar.YEAR)
        val month = c.get(Calendar.MONTH)
        val day = c.get(Calendar.DAY_OF_MONTH)
        dpBtn.setOnClickListener {

            val dpd =
                mContext?.let { it1 ->
                    DatePickerDialog(it1, DatePickerDialog.OnDateSetListener { view, year, month, day ->
                        // Display Selected date in TextView
                        dpBtn.setText("" + day + "/" + (month+1) + "/" + year)
                    }, year, month, day)
                }
            dpd?.show()
        }
        builder.setView(dpBtn)
            //val inflater = requireActivity().layoutInflater;
            .setPositiveButton("Filter",
                DialogInterface.OnClickListener { dialog, id ->
                    val sf = SearchFilter(5, dpBtn.text.toString())
                    //Log.d("textExpire", "Value: " + sf.data)
                    if(sf.data != "") {
                        viewModel.searchFilters.add(sf)
                        observeData()
                    }
                })
            .setNegativeButton("Cancel",
                DialogInterface.OnClickListener { dialog, id ->
                    //cancel
                })
        builder.create()
        builder.show()
        //var dpBtn : EditText? = EditText(mContext)

    }


    fun showCategoryDialog(view: View?) {
        spinString = "Select a Category"
        spinnerDialog = Spinner(mContext)
        val categories = arrayOf(spinString,"Arts & Crafts", "Sports & Hobby", "Baby", "Women's fashion", "Men's fashion", "Electronics", "Games & Videogames", "Automotive")
        val adapter: ArrayAdapter<String>? = mContext?.let { ArrayAdapter<String>(it, android.R.layout.simple_spinner_item, categories) }
        spinnerDialog.adapter = adapter
        spinnerDialog.setOnItemSelectedListener(object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(adapterView: AdapterView<*>, view: View?, position: Int, id: Long) {
                val itm = adapterView.getItemAtPosition(position)
                if (itm != null) {
                    if (view != null) {
                        showPopup(view, (position-1))
                    }
                    //Toast.makeText(mContext, itm.toString(), Toast.LENGTH_SHORT).show()
                }
                //Toast.makeText(mContext, "Selected", Toast.LENGTH_SHORT).show()
            }

            override fun onNothingSelected(adapterView: AdapterView<*>?) {
                // TODO Auto-generated method stub
            }
        })
        val alertDialogBuilder = AlertDialog.Builder(mContext)
        alertDialogBuilder.setTitle("")
        alertDialogBuilder.setMessage("Choose a Category")
        alertDialogBuilder.setView(spinnerDialog)
            .setPositiveButton("Filter",
                DialogInterface.OnClickListener { dialog, id ->
                    val sf = SearchFilter(3, spinnerDialog.getItemAtPosition(0).toString())
                    if(sf.data != "Select a Category" && sf.data != "") {
                        viewModel.searchFilters.add(sf)
                        Log.d("textSearch", sf.data)
                        observeData()
                    }
                })
            .setNegativeButton("Cancel",
                DialogInterface.OnClickListener { dialog, id ->
                    //cancel
                })
        val alertDialog = alertDialogBuilder.create()
        alertDialog.show()
    }

    //Handle Subcategory menu
    private fun showPopup(view: View, categoryNumber: Int) {

        val subcategory0 : Array<String> = arrayOf("Painting, Drawing & Art Supplies", "Sewing", "Scrapbooking & Stamping", "Party Decorations & Supplies")
        val subcategory1 : Array<String> = arrayOf("Sports and Outdoors", "Outdoor Recreation", "Sports & Fitness", "Pet Supplies")
        val subcategory2 : Array<String> = arrayOf("Apparel & Accessories", "Baby & Toddler Toys", "Car Seats & Accessories", "Pregnancy & Maternity", "Strollers & Accessories")
        val subcategory3 : Array<String> = arrayOf("Clothing", " Shoes", " Watches", " Handbags", " Accessories")
        val subcategory4 : Array<String> = arrayOf("Clothing", "Shoes", "Watches", "Accessories")
        val subcategory5 : Array<String> = arrayOf("Computers", "Monitors", "Printers & Scanners", "Camera & Photo", " Smartphone & Tablet", "Audio", "Television & Video", "Video Game Consoles", "Wearable Technology", "Accessories & Supplies", "Irons & Steamers", "Vacuums & Floor Care")
        val subcategory6 : Array<String> = arrayOf("Action Figures & Statues", "Arts & Crafts", "Building Toys", "Dolls & Accessories", "Kids' Electronics", "Learning & Education", "Tricycles, Scooters & Wagons", " Videogames")
        val subcategory7 : Array<String> = arrayOf("Car Electronics & Accessories", "Accessories", "Motorcycle & Powersports", "Replacement Parts", " RV Parts & Accessories", "Tools & Equipment")
        var popup: PopupMenu? = null;
        popup = PopupMenu(mContext, view)
        when(categoryNumber) {
            0 -> for (str in subcategory0){ popup.menu.add(str)}
            1 -> for (str in subcategory1){ popup.menu.add(str)}
            2 -> for (str in subcategory2){ popup.menu.add(str)}
            3 -> for (str in subcategory3){ popup.menu.add(str)}
            4 -> for (str in subcategory4){ popup.menu.add(str)}
            5 -> for (str in subcategory5){ popup.menu.add(str)}
            6 -> for (str in subcategory6){ popup.menu.add(str)}
            7 -> for (str in subcategory7){ popup.menu.add(str)}
            else -> println("Error")
        }
        //popup.inflate(R.menu.subcategory_menu)
        popup.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item: MenuItem? ->
            spinString = item.toString()
            val categories = arrayOf(spinString, "Arts & Crafts", "Sports & Hobby", "Baby", "Women's fashion", "Men's fashion", "Electronics", "Games & Videogames", "Automotive")
            val adapter: ArrayAdapter<String>? = mContext?.let { ArrayAdapter<String>(it, android.R.layout.simple_spinner_item, categories) }
            spinnerDialog.adapter = adapter
            //val categories = arrayOf(item.toString(), "Arts & Crafts", "Sports & Hobby", "Baby", "Women's fashion", "Men's fashion", "Electronics", "Games & Videogames", "Automotive")
            //val adapter: ArrayAdapter<String>? = mContext?.let { ArrayAdapter<String>(it, android.R.layout.simple_spinner_item, categories) }
            //adapter?.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            //spinner = activity?.findViewById(R.id.spinnerFilter) as Spinner
            //spinner.adapter = adapter
            true
        })
        popup.show()
    }
    //End handle subcategory menu

    private fun observeData() {
        viewModel.fetchItems().observe(viewLifecycleOwner,  Observer {
            if(it.isNullOrEmpty()){
                text_empty2.visibility = View.VISIBLE
            }
            else {
                text_empty2.visibility = View.GONE
            }
            item_recycler.adapter = ItemAdapter(it, "InterestedItemList")
            (item_recycler.adapter as ItemAdapter).notifyDataSetChanged()
        })
    }

}
package com.example.lab02_exploits.ui.showProfile

import androidx.lifecycle.ViewModelProviders
import android.os.Bundle
import android.util.Log
import android.view.*
import android.widget.RatingBar
import androidx.activity.addCallback
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import com.bumptech.glide.Glide
import com.example.lab02_exploits.R
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.GeoPoint
import com.google.firebase.storage.FirebaseStorage
import kotlinx.android.synthetic.main.fragment_show_profile.*
import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.roundToLong


class ShowProfileFragment : Fragment() , OnMapReadyCallback{

    var  photoTakenPath : String? = "";
    private lateinit var auth: FirebaseAuth
    private lateinit var storage : FirebaseStorage
    private var interestedProfileOwner : String = ""
    private var currentUser : String = ""
    private var geoUser: GeoPoint? = null

    private lateinit var mMap : GoogleMap
    private var mapReady = false

    companion object {
        fun newInstance() =
            ShowProfileFragment()
    }

    private lateinit var viewModel: ShowProfileViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        setHasOptionsMenu(true)
        return inflater.inflate(R.layout.fragment_show_profile, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        interestedProfileOwner = arguments?.getString("itemInterestedUser", "") ?: ""

        Log.d("position", "OnViewCreated")
        mapUser.onCreate(savedInstanceState)
        mapUser.onResume()
        mapUser.getMapAsync (this)
        mapUser.isClickable = false

        //Better User experience
        requireActivity().onBackPressedDispatcher.addCallback(this) {
            findNavController().navigate(R.id.action_nav_showProfile_to_nav_buyitemList)
        }
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        viewModel = ViewModelProviders.of(this).get(ShowProfileViewModel::class.java)
        auth = FirebaseAuth.getInstance()
        storage = FirebaseStorage.getInstance()
        currentUser = auth.currentUser?.uid.toString()
        //userRatingBar.numStars = 0  // We need to put the rating Here!!!!

        if(auth.currentUser == null){
            profilefields.visibility = View.GONE
            showloginfields.visibility = View.VISIBLE
            tosigninbutton.setOnClickListener{
                findNavController().navigate(R.id.action_nav_showProfile_to_nav_signInFragment)
            }
        }

        if(interestedProfileOwner.isNotEmpty() && currentUser != interestedProfileOwner ) {
            observeCurrentUser (interestedProfileOwner)
        } else {
           if (auth.currentUser != null) {
               observeCurrentUser (currentUser)
           }
       }

        Log.d("ShowProfile", "userId: $currentUser")
        Log.d("ShowProfile", "otherProfile: $interestedProfileOwner")
    }


    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)
        inflater.inflate(R.menu.edit_menu, menu)
    }

    override fun onPrepareOptionsMenu(menu: Menu) {
        super.onPrepareOptionsMenu(menu)
        val item = menu.findItem(R.id.editar)
        if ((interestedProfileOwner.isNotEmpty() && currentUser != interestedProfileOwner) || auth.currentUser == null ) { // Hide the item menu if the current is not the owner
            item.isVisible = false
        }
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.editar -> {
                editProfile();
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun editProfile(){
        val bundle = Bundle()

        if (name.text.toString() != "full_name" || nickname.text.toString() != "nickname" || email.text.toString() != "email@address.com" || location.text.toString() != "location")  {
            bundle.putString("lab02_fullName", name.text.toString())
            bundle.putString("lab02_nickname", nickname.text.toString())
            bundle.putString("lab02_email", email.text.toString())
            bundle.putString( "lab02_location", location.text.toString())
            bundle.putString("lab02_imagepath", photoTakenPath)
        }
        findNavController().navigate(R.id.action_nav_showProfile_to_nav_editProfile, bundle)

    }
    private fun observeRating(sellerId: String) {
        viewModel.fetchUserRating(sellerId).observe(viewLifecycleOwner, Observer{
            Log.d("fetchUserRating", it.toString())
            ratingnumber.text = it.toString().subSequence(0,3).toString()
            if(ratingnumber.text == "0.0" || ratingnumber.text == "NaN")
            {
                ratingnumber.text = "No Review"
            }
        })
    }

    private fun observeCurrentUser (Uid : String) {
        viewModel.fetchUser(Uid).observe(viewLifecycleOwner, Observer{
            name.text = it?.name
            nickname.text = it?.nickname
            email.text = it?.email
            location.text = it?.location
            photoTakenPath = it?.photoPath

            geoUser = it?.geoPoint
            Log.d("position", "Entre Observer")
            updateMap()

            Log.d("ShowP", "${it?.photoPath}")
            if (!it?.photoPath.isNullOrEmpty()) {
                Glide.with(requireContext())
                    .load(it.photoPath)
                    .centerCrop()
                    .circleCrop()
                    .into(photo)
                //photo.setImageURI()
            }
            it.userId?.let { it1 -> observeRating(it1) }
        })

    }

    private fun updateMap() {
        Log.d("position", "Entre updateMap")
        Log.d("position", "$mapReady")
        Log.d("position", "${geoUser}")
        if (mapReady && geoUser != null) {
            Log.d("position", "MapMarker")
            mMap.addMarker(MarkerOptions().position(LatLng(geoUser?.latitude!!, geoUser?.longitude!!)))
            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(geoUser?.latitude!!, geoUser?.longitude!!), 12F));
        }
    }

    override fun onMapReady(googleMap : GoogleMap?) {
        Log.d("position", "Entre a MapReady")
       googleMap?.let { map ->
           mMap = map
           mapReady = true
           map.uiSettings.setAllGesturesEnabled(false)
           updateMap()
       }
    }


}



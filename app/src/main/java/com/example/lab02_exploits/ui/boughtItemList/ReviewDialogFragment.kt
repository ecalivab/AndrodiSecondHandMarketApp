package com.example.lab02_exploits.ui.boughtItemList

import android.content.Context
import androidx.lifecycle.ViewModelProvider
import android.os.Bundle
import android.util.Log
import android.view.*
import android.widget.*
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.navigation.findNavController
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.R
import com.example.lab02_exploits.SearchFilter
import com.google.firebase.auth.FirebaseAuth
import kotlinx.android.synthetic.main.fragment_review_dialog.*

class ReviewDialogFragment : Fragment() {

    private var mContext: Context? = null
    private var vw: View? = null
    lateinit var spinnerDialog: Spinner
    lateinit var spinString: String
    var localList: MutableList<Items>? = null
    var searchFilters: MutableList<SearchFilter>? = null
    private lateinit var auth: FirebaseAuth

    private var itemId: String = ""
    private var itemPropretaryId: String = ""

    //var searchFilters: MutableList<SearchFilter>? = null

    override fun onAttach(context: Context) {
        super.onAttach(context)
        mContext = context
    }

    override fun onDetach() {
        super.onDetach()
        mContext = null
    }


    companion object {
        fun newInstance() =
            ReviewDialogFragment()
    }

    private lateinit var viewModel: BoughtItemListViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        setHasOptionsMenu(true);
        activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        return inflater.inflate(R.layout.fragment_review_dialog, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        if (null == savedInstanceState) {
            itemId = arguments?.getString("adapter_id", "0") ?: "0"
            itemPropretaryId = arguments?.getString("adapter_uid", "0") ?: "0"
            arguments?.clear() //It needs to be clear otherwise it continues to add the last item
            //End receive data from item details
        }
        else
        {
            itemId = savedInstanceState.getString("adapter_id")!!
            itemPropretaryId = savedInstanceState.getString("adapter_uid")!!
        }

        auth = FirebaseAuth.getInstance()
        Log.d("ReviewData", auth.currentUser?.uid!!)
        Log.d("ReviewData", itemId!!)
        Log.d("ReviewData", itemPropretaryId)
    }

    override fun onSaveInstanceState(outState: Bundle) {
        outState.putString("adapter_id", itemId)
        outState.putString("adapter_uid", itemPropretaryId)
        super.onSaveInstanceState(outState)
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        viewModel = ViewModelProvider(this).get(BoughtItemListViewModel::class.java)
        observeData(auth.currentUser?.uid!!, itemId, itemPropretaryId)
        ratingbar!!.onRatingBarChangeListener =
            RatingBar.OnRatingBarChangeListener { ratingBar, v, b ->
                tvRatingScale!!.text = v.toString()
                when (ratingBar.rating.toInt()) {
                    1 -> tvRatingScale!!.text = "Very bad"
                    2 -> tvRatingScale!!.text = "Need some improvement"
                    3 -> tvRatingScale!!.text = "Good"
                    4 -> tvRatingScale!!.text = "Great"
                    5 -> tvRatingScale!!.text = "Awesome. I love it"
                    else -> tvRatingScale!!.text = ""
                }
            }


         reviewBtn.setOnClickListener {
            if(ratingbar.rating.toString() != "0.0") {
                viewModel.setSellerReview(
                    auth.currentUser?.uid!!,
                    itemId,
                    itemPropretaryId,
                    ratingbar.rating.toString(),
                    ratingcomment.text.toString()
                )
                it.findNavController().navigate(R.id.action_reviewDialogFragment_to_nav_boughtItemList)
            }
            else
            {
                Toast.makeText(requireContext(), "Insert a Rating Please", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun observeData(uid: String, iId: String, sellerId: String){
        viewModel.blockDoubleReview(uid, iId, sellerId).observe(viewLifecycleOwner,  Observer {
            Log.d("ReviewFinalValueReceivedObserved", it.toString())
            if(it == true){
                reviewBtn.visibility = View.GONE
                viewModel.getReview(uid, iId, sellerId).observe(viewLifecycleOwner, Observer {review ->
                    ratingbar.rating = review.rating.toFloat()
                    ratingcomment.setText(review.comment)

                })
                ratingbar.isEnabled = false
                ratingcomment.isEnabled = false
            }
        })
    }
}
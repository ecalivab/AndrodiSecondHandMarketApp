package com.example.lab02_exploits.ui.maps


import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Geocoder
import android.location.Location
import android.location.LocationListener
import android.location.LocationManager
import androidx.lifecycle.ViewModelProviders
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.*
import androidx.activity.addCallback
import androidx.core.app.ActivityCompat
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController

import com.example.lab02_exploits.R
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.GeoPoint
import kotlinx.android.synthetic.main.fragment_maps.*

class MapUser : Fragment(), OnMapReadyCallback {

    companion object {
        fun newInstance() = MapUser()
    }
    private lateinit var auth: FirebaseAuth
    private lateinit var mMap : GoogleMap
    private var loc : MarkerOptions = MarkerOptions()
    private lateinit var viewModel: MapViewModel
    private lateinit var locationManager : LocationManager
    private var hasGps = false
    private var locationGps: Location? = null
    private var address : String = ""


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        setHasOptionsMenu(true)
        return inflater.inflate(R.layout.fragment_maps, container, false)
    }


    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        viewModel = ViewModelProviders.of(this).get(MapViewModel::class.java)

        auth = FirebaseAuth.getInstance()

        map_view.onCreate(savedInstanceState)
        map_view.onResume()
        map_view.getMapAsync(this)

        requireActivity().onBackPressedDispatcher.addCallback(this) {
            val bundle = Bundle()
            bundle.putParcelable("user_loc", loc)
            bundle.putString("user_addr", address)
            //Log.d("position", "Lat ${loc.position.latitude}")
            //Log.d("position", "Long ${loc.position.longitude}")

            findNavController().navigate(R.id.action_nav_maps_to_nav_editProfile, bundle)
        }

    }

   override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)
        inflater.inflate(R.menu.save_menu, menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.saveM -> {
                val bundle = Bundle()
                bundle.putParcelable("user_loc", loc)
                bundle.putString("user_addr", address)
                //Log.d("position", "Lat ${loc.position.latitude}")
                //Log.d("position", "Long ${loc.position.longitude}")

                findNavController().navigate(R.id.action_nav_maps_to_nav_editProfile, bundle)
                true
            }

            android.R.id.home -> {
                val bundle = Bundle()
                bundle.putParcelable("user_loc", loc)
                bundle.putString("user_addr", address)
                //Log.d("position", "Lat ${loc.position.latitude}")
                //Log.d("position", "Long ${loc.position.longitude}")

                findNavController().navigate(R.id.action_nav_maps_to_nav_editProfile, bundle)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onMapReady(googleMap: GoogleMap?) {
        googleMap?.let { map ->   //Null Check
            mMap = map
            getLocation()
            if (locationGps != null) {
                val currentLangLong: LatLng? =
                    LatLng(locationGps!!.latitude, locationGps!!.longitude)
                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLangLong, 12F));

                address = getAddress(locationGps!!.latitude, locationGps!!.longitude)
                Log.d("position", "Adress $address")
            }
            googleMap.setOnMapLongClickListener {
                googleMap.clear()
                googleMap.addMarker(loc.position(it))

                address = getAddress(loc.position.latitude,loc.position.longitude)
                viewModel.updateUserLocation(auth.uid.toString(),address, GeoPoint(loc.position.latitude, loc.position.longitude))
           }

        }
    }


    private fun getAddress(lat: Double, lng: Double): String {
        var address = ""
        val geocoder = Geocoder(requireContext())
        val list = geocoder.getFromLocation(lat, lng, 1)
        val city = list[0].getAddressLine(0).split(",")
        //val specific = city[2].split(" ")
        Log.d("position", "CityString $city")
        //Log.d("position", "CitySpeci $specific")
       // address = if (specific.size > 2) {
          //  specific[1] + " " + specific[2]
       // } else
           // specific[1]

        return list[0].getAddressLine(0)
    }

    private fun getLocation() {
        locationManager = activity?.getSystemService(Context.LOCATION_SERVICE) as LocationManager
        hasGps = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)
        if(hasGps) {
            if (ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                    requireContext(), Manifest.permission.ACCESS_COARSE_LOCATION ) != PackageManager.PERMISSION_GRANTED) {
                val permissions = arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)
                requestPermissions(permissions, 1520);

            } else {
                mMap.isMyLocationEnabled = true

                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 0F,  object : LocationListener {

                    override fun onLocationChanged(location: Location?) {
                        if (location != null) {
                            locationGps = location
                            Log.d("position", "LatGPS ${locationGps!!.latitude}")
                            Log.d("position", "LongGPS ${locationGps!!.longitude}")
                        }
                    }

                    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {
                    }

                    override fun onProviderEnabled(provider: String?) {
                    }

                    override fun onProviderDisabled(provider: String?) {
                    }
                })

                val localGPS = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)
                if (localGPS != null) {
                    locationGps = localGPS
                }

            }
        }  else {
            startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
        }
    }

}

package com.example.lab02_exploits.ui.itemList

import android.util.Log
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.lab02_exploits.ItemRepository
import com.example.lab02_exploits.Items
import com.example.lab02_exploits.SearchFilter
import com.google.firebase.auth.FirebaseAuth

class ItemListViewModel : ViewModel() {

    private val itemRepo = ItemRepository()
    private lateinit var auth: FirebaseAuth
    var searchFilters = mutableListOf<SearchFilter>()

    fun fetchItems() : MutableLiveData<MutableList<Items>> {
        val mutableData = MutableLiveData<MutableList<Items>>()
        itemRepo.getItemsData().observeForever{ userList ->
            mutableData.value = userList
        }
        return mutableData
    }

    fun fetchMyItems() : MutableLiveData<MutableList<Items>> {
        //Log.d("fetchItems", "Entered")
        val mutableData = MutableLiveData<MutableList<Items>>()
        //var sf = SearchFilter(0, "ref")
        //searchFilters?.add(sf)
        //Log.d("searchFilter", searchFilters.elementAt(0).data.toString())
        auth = FirebaseAuth.getInstance()

        if(auth.currentUser != null) {
            Log.d("signed", auth.currentUser?.uid.toString())
            itemRepo.getMyFilteredItemsData(auth, searchFilters).observeForever { userList ->
                mutableData.value = userList
            }
        }
        else
        {
            //Log.d("searchFilter", searchFilters?.get(0)?.type.toString() + searchFilters?.get(0)?.data.toString())
            itemRepo.getMyFilteredItemsData(null, searchFilters).observeForever { userList ->
                mutableData.value = userList
            }

        }
        return mutableData
    }


}

package com.example.lab02_exploits


import android.annotation.SuppressLint
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.ActionBarDrawerToggle
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.snackbar.Snackbar
import com.google.android.material.navigation.NavigationView
import androidx.navigation.findNavController
import androidx.navigation.ui.AppBarConfiguration
import androidx.navigation.ui.navigateUp
import androidx.navigation.ui.setupActionBarWithNavController
import androidx.navigation.ui.setupWithNavController
import androidx.drawerlayout.widget.DrawerLayout
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProviders
import androidx.navigation.NavController
import com.bumptech.glide.Glide
import com.google.firebase.auth.FirebaseAuth
import kotlinx.android.synthetic.main.nav_header_main.*

class MainActivity : AppCompatActivity() {

    private lateinit var appBarConfiguration: AppBarConfiguration

    var photoTakenPath : String? = ""
    private lateinit var auth: FirebaseAuth
    private lateinit var viewModel: MainActivityViewModel
    private var currentUser : String = ""



    private lateinit var navView: NavigationView
    private lateinit var navController : NavController

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        val toolbar: Toolbar = findViewById(R.id.toolbar)
        setSupportActionBar(toolbar)

        val drawerLayout: DrawerLayout = findViewById(R.id.drawer_layout)
        navView = findViewById(R.id.nav_view)
        navController = findNavController(R.id.nav_host_fragment)
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        appBarConfiguration = AppBarConfiguration(setOf(
            R.id.nav_buyitemList, R.id.nav_itemList, R.id.nav_showProfile, R.id.nav_interestedItemList, R.id.nav_boughtItemList, R.id.nav_signInFragment), drawerLayout)
        setupActionBarWithNavController(navController, appBarConfiguration)
        navView.setupWithNavController(navController)

        //Populate NAV Header!!!
        auth = FirebaseAuth.getInstance()
        currentUser = auth.currentUser?.uid.toString()
        viewModel = ViewModelProviders.of(this).get(MainActivityViewModel::class.java)
        //getuserNotifications() //Have To Migrate to FCM!!!


        val mDrawerToggle = object : ActionBarDrawerToggle (this, drawerLayout,R.string.navigation_drawer_open,R.string.navigation_drawer_close) {
            /** Called when a drawer has settled in a completely closed state.  */
            override fun onDrawerClosed(view: View) {
                super.onDrawerClosed(view)
            }

            /** Called when a drawer has settled in a completely open state.  */
            override fun onDrawerOpened(drawerView: View) {
                super.onDrawerOpened(drawerView)
                currentUser = auth.currentUser?.uid.toString()
                //if(auth.currentUser != null)
                observeData(currentUser)
            }
        }

        drawerLayout.addDrawerListener(mDrawerToggle)
        mDrawerToggle.isDrawerIndicatorEnabled = true;
    }

    //For FAB button to works was needed to add a NAV Controller
    override fun onStart() {
        super.onStart()
        val fab: FloatingActionButton = findViewById(R.id.fab)
        fab.setOnClickListener { //view ->
            // Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
            // .setAction("Action", null).show()
            val navController = findNavController(R.id.nav_host_fragment)
            val currentFragment = navController.currentDestination?.label
            when (currentFragment) {
                "Items On Sale" -> {
                    val bundle = Bundle() // Empty bundle has to pass otherwise the app crash
                    navController.navigate(R.id.action_nav_buyitemList_to_nav_itemEdit, bundle)
                }
                "My Items" -> {
                    val bundle =  Bundle()
                    navController.navigate(R.id.action_nav_itemList_to_editDetailsFragment)
                }
                else -> {
                    Toast.makeText(applicationContext, "To Add an Item: Return to Home (Sale Products)",Toast.LENGTH_LONG).show()
                }
            }
           // if (currentFragment == "Items On Sale" ) {
               // val bundle = Bundle() // Empty bundle has to pass otherwise the app crash
              //  navController.navigate(R.id.action_nav_buyitemList_to_nav_itemEdit, bundle)
            //} else {
                //Toast.makeText(applicationContext, "To Add an Item: Return to Home (Sale Products)",Toast.LENGTH_LONG).show()
           // }
        }
    }


    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.main, menu)
        return true
    }

    override fun onSupportNavigateUp(): Boolean {
        val navController = findNavController(R.id.nav_host_fragment)
        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()
    }

    @SuppressLint("SetTextI18n")
    private fun observeData(Uid: String) {
        val headerView : View = navView.getHeaderView(0) //Important to get the viewheader
        val navUsername : TextView = headerView.findViewById(R.id.header_name)
        val navUserEmail : TextView = headerView.findViewById(R.id.header_email)
        val navProfilePic : ImageView = headerView.findViewById(R.id.header_profileImg)

        viewModel.fetchUser(Uid).observe(this, Observer {
            if (it != null) {
                navUsername.text = it.name
                navUserEmail.text = it.email
                photoTakenPath = it.photoPath
                if (!it.photoPath.isNullOrEmpty()) {
                    Glide.with(this)
                        .load(it.photoPath)
                        .centerCrop()
                        .circleCrop()
                        .into(navProfilePic)
                }
            } else {
                navUsername.text = "Android Studio"
                navUserEmail.text = "androidstudio@andorid.com"
                Glide.with(this)
                    .load(R.mipmap.ic_launcher_round)
                    .into(navProfilePic)
            }
        })
    }

    //Show notification
    /*private fun showNotification(title: String, message: String) {
        val mNotificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            val channel = NotificationChannel("YOUR_CHANNEL_ID",
                "ISN",
                NotificationManager.IMPORTANCE_DEFAULT)
            channel.description = "Interested Item Sold"
            mNotificationManager.createNotificationChannel(channel)
        }
        val mBuilder = NotificationCompat.Builder(applicationContext, "YOUR_CHANNEL_ID")
            .setSmallIcon(R.mipmap.ic_launcher) // notification icon
            .setContentTitle(title) // title for notification
            .setContentText(message)// message for notification
            .setAutoCancel(true) // clear notification after click
        val intent = Intent(applicationContext, MainActivity::class.java)
        val pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)
        mBuilder.setContentIntent(pi)
        mNotificationManager.notify(0, mBuilder.build())
    }*/

    /*private fun getuserNotifications()
   {
       Log.d("Notification", "GetUserNotificationsEntered")
       viewModel.getNotifications().observe(this, Observer{
           Log.d("Notification", "Notify: $it")
           for(itemNotification in it)
           {
               Log.d("Notification", "EnteredObserver")
               showNotification("Sold Interested Item", "Item "+itemNotification.title+" has been sold to another user")
               //showNotification("Sold Interested Item", "Item "+item.value?.title+" has been sold to another user")
           }
       })
   }*/
}
